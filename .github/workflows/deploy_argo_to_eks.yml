name: Deploy ArgoCD to EKS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name demo-cluster

    - name: Create ArgoCD Namespace
      run: |
        kubectl create namespace argocd || true

    - name: Deploy ArgoCD
      run: |
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    - name: Expose ArgoCD Server via LoadBalancer
      run: |
        kubectl patch svc argocd-server -n argocd \
          -p '{"spec": {"type": "LoadBalancer"}}'

    - name: Store ArgoCD Admin Password in AWS Secrets Manager
      env:
        SECRET_NAME: ArgoCDAdminPassword
      run: |
        # Get the ArgoCD admin password from Kubernetes
        PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

        # Check if the secret exists
        if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" > /dev/null 2>&1; then
          echo "Updating existing secret..."
          aws secretsmanager update-secret --secret-id "$SECRET_NAME" --secret-string "$PASSWORD"
        else
          echo "Creating new secret..."
          aws secretsmanager create-secret --name "$SECRET_NAME" --secret-string "$PASSWORD"
        fi

    - name: Create Quote-Collector Namespace
      run: |
        kubectl create namespace quote-collector || true

    - name: Create MongoDB Secret
      run: |
        kubectl create secret generic mongo-credentials -n quote-collector \
          --from-literal=MONGO_URI="${{ secrets.MONGO_URI }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Check MongoDB Secret was created
      run: |
        kubectl get secret -A


    - name: Deploy App of Apps
      run: |
        kubectl apply -f argocd/app_of_apps/app_of_apps.yaml